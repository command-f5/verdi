<?php

function importkit_init()
{
    $cur_path = current_path();
    $allowed_paths = array('admin/importkit','admin/importkit/settings','batch');
    if (!in_array($cur_path, $allowed_paths)) {
        return;
    }
    spl_autoload_register('importkit_autoload', true);

    // Получаем список обрабатываемых функций для каждого слушателя
    $call_backs = module_invoke_all('importkit_call_backs');

    $listners = array();

    // Получаем список слушателей
    $classes = importkit_info();

    // Инициализируем слушателей
    foreach (array_keys($classes) as $listner) {
        $listners[] = new $listner($call_backs);
    }

    // Запускаем обработчик
    $importkit = ImportkitObservable::getInstance(count($listners));

    // Установка пути
    $path = variable_get('importkit_data_path', '');
    if (!is_dir($path)) {
        $path = drupal_get_path('module', 'importkit') . '/data';
        variable_set('importkit_data_path', $path);
    }

    // Устанавливаем права на папку
    @chmod($path, 0775);

    // Основные настройки
    $importkit->setImport('import', $path . '/import.xml');
    $importkit->setImport('offers', $path . '/offers.xml');
    //$importkit->setExport('order', $path . '/order_!id.xml');

    // Регистрируем слушателей
    foreach ($listners as $listner) {
        $importkit->attach($listner);
    }

    register_shutdown_function('importkit_shutdown', $importkit);

}

function importkit_info()
{
    static $classes;
    if (!isset($clаsses)) {
        $classes = module_invoke_all('importkit_info');
    }
    return $classes;
}

function importkit_importkit_info()
{
    $path = drupal_get_path('module', 'importkit') . '/includes';

    return array(
        // Основные настройки модуля
        'ImportkitListnerCommon' => $path . '/listners/ImportkitListnerCommon',
        // Класс очищающий все временные объекты
        'ImportkitListnerClean' => $path . '/listners/ImportkitListnerClean',
    );
}

function importkit_shutdown($importkit)
{
    $_errors = array();
    $errors = $importkit->getErrors();
    foreach ($errors as $className => $class_errors) {

        foreach ($class_errors as $error) {
            watchdog('importkit', "%error (Listner: %class)",
                array(
                    '%class' => $className,
                    '%error' => $error,
                ), WATCHDOG_ERROR);
        }

        $_errors = $class_errors;

        // Получаем ранее полученные ошибки
        if($cache = cache_get('importkit_errors_' . $className)){
            $_errors = array_merge($_errors, $cache->data);
        }

        // Сохраняем последнюю ошибку класса
        cache_set('importkit_errors_' . $className, $_errors);
    }
}

function importkit_autoload($class)
{
    $path = drupal_get_path('module', 'importkit') . '/includes';

    $classes = importkit_info();

    // Регистрируем основные классы модуля
    $classes = array_merge($classes, array(

        // Интерфейсы
        'InterfaceObserver' => $path . '/interfaces/InterfaceObserver',
        'InterfaceReader' => $path . '/interfaces/InterfaceReader',
        'InterfaceSubject' => $path . '/interfaces/InterfaceSubject',

        // Классы для парсинга XML
        'ImportkitXMLReader' => $path . '/parsers/ImportkitXMLReader',
        'ImportkitParserCML' => $path . '/parsers/ImportkitParserCML',

        // Классы для парсинга CSV

        // Классы для парсинга текстового файла

        // Классы для парсинга DBF

        ));

    if (isset($classes[$class])) {
        $path = $classes[$class];
    } else {
        $path .= '/' . $class;
    }

    if (file_exists($path . '.php')) {
        require_once $path . '.php';
    }
}

function importkit_menu()
{
    $items['admin/importkit'] = array( // Main page
        'title' => 'importkit',
        'access callback' => TRUE,
//      'access callback' => 'user_access',
//      'access arguments' => array('administer importkit'),
        'page callback' => 'importkit_page',
        'weight' => 1,
    );

    $items['admin/importkit/batch'] = array(
        'title' => 'Batch',
        'description' => 'Run the batch importer processing.',
        'access arguments' => array('administer importer'),
        'type' => MENU_DEFAULT_LOCAL_TASK,
    );

    $items['admin/importkit/settings'] = array( // Settings
        'title' => t('importkit settings'),
        'description' => t('importkit settings'),
        'access callback' => TRUE,
//      'access callback' => 'user_access',
//      'access arguments' => array('administer importer'),
        'page callback' => 'importkit_settings',
        'type' => MENU_LOCAL_TASK,
        'weight' => 2,
    );

    return $items;
}

function importkit_run()
{
    importkit_product_batch_set();
    // Используется для запуска из консоли (drush, cron)
    if (!cache_get('importkit_progressive')) {
        drupal_goto('admin/importkit');
    }
    return TRUE;
}

function importkit_product_batch_set()
{
    $t = get_t();

    /*if (cache_get('importkit_working')) {
        $message = t('Importkit is working now');
        // Используется для запуска из консоли (drush, cron)
        if (cache_get('importkit_progressive'))
        {
            echo "$message\n";
        } else {
            drupal_set_message($message, 'error');
        }
        return FALSE;
    }*/

    $jobs = importkit_get_jobs();

    if ($jobs) {

        // Используется для зацикливания batch процесса
        $batch = & batch_get();

        $batch = array(
            'operations' => $jobs,
            'title' => $t('Importkit processing ...'),
            'init_message' => $t('Starting processing'),
            'error_message' => $t('Error during process'),
            'finished' => 'importkit_batch_finished',
        );

        batch_set($batch);

        // Используется для запуска из консоли (drush, cron)
        if (cache_get('importkit_progressive')) {
            $batch = & batch_get();
            $batch['progressive'] = FALSE;
        }

        batch_process();

        cache_set('importkit_working', time());

        rules_invoke_event('importkit_import_started', $jobs);

        return true;

    } else {
        drupal_set_message($t('Not selected any option. Please select something.'), 'error');
    }
}

function importkit_batch($options, &$context)
{

    if (!isset($options['max'])) {
        return;
    }

    $chunks = 1;

    if (isset($options['chunks'])) {
        $chunks = $options['chunks'];
    }

    /*if (!isset($context['sandbox']['progress'])) {
        $context['sandbox']['progress'] = 0;
        //$context['results']['progress'] = 0;
        $context['message'] = t('Processed chunks: @chunks', array('@chunks' => $chunks)) . '<br>';
        $context['sandbox']['max'] = $options['max'];
        if (isset($options['chunks'])) {
            $context['sandbox']['max'] *= $chunks;
        }
    }*/

    $context['sandbox']['max'] = $options['max'];
    //$context['sandbox']['progress']++;
    if (!isset($context['results']['progress']))
        $context['results']['progress'] = 0;
    $context['results']['progress']++;
    //$context['sandbox']['progress'] *= $chunks;

    // Устанавливаем флаг удачного завершения,
    // для принудительной очистки очереди задач
    $context['finished'] = 1;

    // Передаем по ссылке контекст в листнер
    $options['params']['context'] = & $context;

    // Информируем пользователя о совершаемых действиях
    $arg = '';
    if (isset($options['params']['argument'])) {
        switch (gettype($options['params']['argument'])) {
            case 'object':
                $arg = 'Object()';
                break;

            case 'array':
                $array = reset($options['params']['argument']);
                if(is_array($array)){
                    $arg = 'Array('.count($array).')';
                } else {
                    $arg = gettype($array);
                }
                break;

            default:
                $arg = '"' . $options['params']['argument'] . '"';
                break;
        }
    }

    $context['message'] .= t('Processing with listner: %listner->%method( %argument )<br>',
        array(
            '%listner' => $options['class'],
            '%method' => $options['method'],
            '%argument' => $arg,
        ));

    $start = microtime(true);

    // Используется для запуска из консоли (drush, cron)
    if (cache_get('importkit_progressive')) {
        //drupal_set_message($context['message'], 'notice');
        echo "Process {$options['class']}->{$options['method']}() starting...\n";
    }

    if ($chunks > 1) {
        $arguments = $options['params']['argument'];
        foreach ($arguments as $argument) {
            $options['params']['argument'] = $argument;
            ImportkitObservable::getInstance()->run($options);
        }
    } else {
        ImportkitObservable::getInstance()->run($options);
    }

    // Передаем параметры в finished
    $context['results'][ $options['class'] ] = array(
        'class' => $options['class'],
        'method' => $options['method'],
        'operations' => array(),
    );

    // Используется для запуска из консоли (drush, cron)
    if (cache_get('importkit_progressive')) {
        $progress = $context['results']['progress'] * $chunks;
        $finished = $progress / $context['sandbox']['max'];
        if($finished >= 1){
            $context['results']['progress'] = 0;
            echo t('Finished') . "\n";
        } else {
            echo t('Processed chunks @progess/@max', array(
                '@progess' => $progress,
                '@max' => $context['sandbox']['max'])) . "\n";
            echo t('Time passed: @time sek.', array('@time' => round(microtime(true) - $start, 2))) . "\n";
        }
    }

    $context['message'] .= t('Time passed: @time sek.<br>', array('@time' => round(microtime(true) - $start, 2)));
    $context['message'] .= t('Memory used: @memory Mb.<br>', array('@memory' => round(memory_get_peak_usage() / 1024 / 1024, 2)));
}

function importkit_batch_finished($success, $results, $operations)
{

    $jobs = array();

    foreach ($results as $result) {
        if(!isset($result['class'])) continue;

        $options = array(
            'class' => $result['class'],
            'method' => 'finished',
            'params' => array(
                'success' => $success,
                'results' => $result,
                'operations' => $operations
            ),
            'errors' => array(),
        );

        ImportkitObservable::getInstance()->run($options);
    }

    // Проверяем наличие добавленных заданий
    if (ImportkitObservable::getInstance()->getJobs()) {
        // Запускаем обработчик
        importkit_run();
    } else {
        rules_invoke_event('importkit_import_finished', $results);

        // Переводим в рабочий режим
        variable_set('maintenance_mode', 0);

        // Используется для запуска из консоли (drush, cron)
        if (!cache_get('importkit_progressive')) {
            // Завершаем обработку
            drupal_goto('admin/importkit');
        } else {
            return true;
        }
    }
}

function importkit_get_jobs()
{
    $operations = array();
    foreach (ImportkitObservable::getInstance() as $listner) {
        $methods = $listner->getJobs();
        if ($methods && count($methods)) {

            $params = $listner->getParams();
            $params['class'] = get_class($listner);
            $params['params'] = array();

            // Ставим задачи на обработку
            foreach ($methods as $method => $arguments) {

                // Преводим аргументы к единному стилю
                $_arguments = array();
                if(!is_array($arguments)){
                    $_arguments[] = $arguments;
                } else {
                    $_arguments = $arguments;
                }

                $params['method'] = $method;
                $params['max'] = 1;

                if ($_arguments && count($_arguments)) {
                    $params['max'] = count($_arguments);
                    // Разбиваем массив задач на заданные части
                    // и формируем из них задания
                    if (isset($params['chunks']) && $params['chunks'] > 1) {
                        $_arguments = array_chunk($_arguments, $params['chunks']);
                    }
                    foreach ($_arguments as $argument) {
                        // Устанавливаем переменную для единичных параметров
                        $params['params'] = array('argument' => $argument);
                        // Устанавливаем обработчик
                        $operations[] = array('importkit_batch', array($params));
                    }
                } else {
                    $params['chunks'] = 1;
                    // Устанавливаем обработчик
                    $operations[] = array('importkit_batch', array($params));
                }
            }
        }
    }
    return $operations;
}

function importkit_page()
{
    /*if (cache_get('importkit_working')) {
        $message = t('Importkit is working now.');
        drupal_set_message($message, 'error');
    }*/

    return drupal_get_form('importkit_form');
}

function importkit_form($form, $form_state)
{
    $submit = false;
    if (isset($form_state['post']))
        $submit = true;

    $form = array();
    foreach (ImportkitObservable::getInstance() as $listner) {
        if(isset($form_state['input'])){
            $listner->setVariables($form_state['input']);
        }
        $_form = $listner->form($form_state, $submit);

        if ($_form) {
            $errors = ImportkitObservable::getInstance()->getErrorsByListner($listner);
            if ($errors) {
                $_form[ ]['errors'] = array(
                    '#type' => 'item',
                    '#markup' => is_array($errors) ? implode('<br>', $errors) : $errors,
                    '#prefix' => '<div class="messages error">',
                    '#suffix' => '</div>',
                    '#weight' => 100,
                );
            }

            $form[] = $_form;
        }
    }

    $form['actions']['#type'] = 'actions';

    $form['actions']['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Submit'),
        '#submit' => array('importkit_form_submit'),
    );

    return $form;
}

function importkit_form_submit($form, &$form_state, $console = false)
{
    // Переводим работу сайта в "Режим обслуживания"
//  variable_set('maintenance_mode', 1);

    if(in_array('importkit_form_submit', $form_state['submit_handlers'])){
        // Очистка кешей
        cache_clear_all('importkit_progressive', 'cache');
        cache_clear_all('importkit_results', 'cache');
        foreach (ImportkitObservable::getInstance() as $listner) {
            cache_clear_all('importkit_errors_' . get_class($listner), 'cache');
        }
    }

    // Информирование форм о сабмите
    foreach (ImportkitObservable::getInstance() as $listner) {
        $listner->form_submit($form, $form_state);
    }

    if(!$console){
        importkit_run();
    }
}

function importkit_save_form($form, &$form_state)
{
    importkit_form_submit($form, $form_state, true);
    system_settings_form_submit($form, $form_state);
    variable_set('imporkit_settings', $form_state['values']);
}

function importkit_settings()
{

    /*if (cache_get('importkit_working')) {
        $message = t('Importkit is working now');
        drupal_set_message($message, 'error');
    }*/

    return drupal_get_form('importkit_settings_form');
}

function importkit_settings_form($form, $form_state)
{
    $submit = false;
    if (isset($form_state['post'])) {
        $submit = true;
    }

    $form = array();
    foreach (ImportkitObservable::getInstance() as $listner) {
        if(isset($form_state['input'])){
            $listner->setVariables($form_state['input']);
        }
        $form[] = $listner->settings_form($form_state, $submit);
    }

    if(!$form){
        // Не подключены модули обработчики
    }

    $form = system_settings_form($form);

    $form['#submit'][] = 'importkit_settings_form_submit';

    /*$form['actions']['clear'] = array(
        '#type' => 'submit',
        '#value' => t('Clear cache'),
        '#weight' => 999,
        '#submit' => array('importkit_clear_cache'),
    );*/

    return $form;
}

function importkit_settings_form_submit($form, &$form_state)
{
    foreach (ImportkitObservable::getInstance() as $listner) {
        $listner->settings_form_submit($form, $form_state);
    }
}

function importkit_tutf($content)
{
    if ($content) html_entity_decode((string)$content, ENT_QUOTES, "UTF-8");
    return (string)trim($content);
}

function importkit_field_reset(&$field, $key, $value)
{
    if(is_array($field)){
        foreach($field as $item_key => $item_value){
            if(isset($field[$item_key]) && $field[$item_key][$key] == $value){
                unset($field[$item_key]);
                break;
            }
        }
    }
}

function my_error_handler($errno, $errstr, $a=0, $b=0, $c=0) {
    global $__qwe_code, $__qwe_entity;
    watchdog("ikit", $__qwe_code);
    dpm($__qwe_entity);
    ddebug_backtrace();
}

function importkit_get_field($entity, $field_name, $default = '', $extra = "['und'][0]['value']")
{
    if(isset($entity->{$field_name})){
        try
        {
/*
            $code = "<?php return \$entity->{$field_name}{$extra};";
            ob_start();
            print eval('?>' . $code);
            $output = ob_get_contents();
            ob_end_clean();
            return $output;
*/
            $code = "return \$entity->{$field_name}{$extra};";
            ob_start();
            // set_error_handler('my_error_handler');
            // global $__qwe_code, $__qwe_entity; $__qwe_code = $code; $__qwe_entity = $entity;
            print eval($code);
            // restore_error_handler();
            $output = ob_get_contents();
            ob_end_clean();
            return $output;
        }
        catch(Exception $e)
        {
            $error = $e->getMessage();
            watchdog('importkit', $error, array(), WATCHDOG_ERROR);
        }
    } else {
        return $default;
    }
}

function importkit_convert($from = "UTF-8", $into = "WINDOWS-1251", $content)
{
    if (strtoupper($from) == strtoupper($into)) return $content;
    if (function_exists("iconv")) {
        $content = iconv($from, $into, $content);
    } elseif (function_exists("libiconv")) {
        $content = libiconv($from, $into, $content);
    } elseif (function_exists("mb_convert_encoding")) {
        $content = mb_convert_encoding($content, $into, $from);
    }
    return $content;
}

function importkit_rules_event_info()
{
    $events = array();

    $events['importkit_import_started'] = array(
    'label' => t('Importkit has been started'),
    'group' => t('Import'),
    'variables' => array(
    ),
    'access callback' => 'importkit_rules_access',
    );

    $events['importkit_import_finished'] = array(
    'label' => t('Importkit has been finished'),
    'group' => t('Import'),
    'variables' => array(
        'results' => array()
    ),
    'access callback' => 'importkit_rules_access',
    );

    return $events;
}

function importkit_rules_access()
{
    // @todo
    return TRUE;
}

function importkit_cron()
{
    //importkit_product_batch_set(true);
}

function importkit_clear_cache()
{
    if($keys = cache_get('cml_store_category_category'))
    {
        importkit_cache_key_clear($keys, 'cache');
    }
    cache_clear_all('cml_store_category_category', 'cache');

    if($keys = cache_get('cml_store_content_products'))
    {
        importkit_cache_key_clear($keys, 'cache');
    }
    cache_clear_all('cml_store_content_products', 'cache');

    if($keys = cache_get('cml_store_content_offers'))
    {
        importkit_cache_key_clear($keys, 'cache');
    }

    cache_clear_all('cml_store_content_offers', 'cache');
    cache_clear_all('importkit_working', 'cache');
}

function importkit_cache_key_clear($keys)
{
    foreach($keys as $key)
    {
            cache_clear_all($key, 'cache');
    }
}
