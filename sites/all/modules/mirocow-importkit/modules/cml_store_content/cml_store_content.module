<?php

function cml_store_content_importkit_call_backs()
{
	return array(
		'Товары' => 'cml_store_content_parse_products',
		'Предложения' => 'cml_store_content_parse_offers',
		'products' => 'cml_store_content_get_products',
		'offers' => 'cml_store_content_get_offers',
		'imported_products' => 'cml_store_content_get_products_imported',
		'imported_offers' => 'cml_store_content_get_offers_imported',
		'get_content_products' => 'cml_store_content_get_imports_content',
		'get_content_offers' => 'cml_store_content_get_offers_content',
		'remove_product' => 'cml_store_content_node_remove',
		'remove_offer' => 'cml_store_content_offer_remove',
		'batch' => 'cml_store_content_batch',
	);
}

function cml_store_content_importkit_info()
{
	$path = drupal_get_path('module', 'cml_store_content') . '/listners';

	return array(
		'ImportkitListnerContent' => $path . '/ImportkitListnerContent',
		'ImportkitListnerOffers' => $path . '/ImportkitListnerOffers',
	);
}

// Обрабатывает import.xml
function cml_store_content_parse_products($reader, $path, $ver, $created)
{
	$valid = true;
	$contentMap = array();
	$reader->read();
	while ($reader->read() &&
			!($reader->name == "Товары" &&
				$reader->nodeType == XMLReader::END_ELEMENT)) {

		if ($result = cml_store_content_store_xml_node($reader)) {
			$contentMap[] = $result;
		}

	}

	if (!$contentMap)
	{
		return FALSE;
	}

	cache_set('cml_store_content_products', $contentMap, 'cache', CACHE_PERMANENT);

	return TRUE;
}

// Обрабатывает offers.xml
function cml_store_content_parse_offers($reader, $path, $ver, $created)
{

	$valid = true;
	$contentMap = array();
	$reader->read();
	while ($reader->read() &&
			!($reader->name == "Предложения" &&
				$reader->nodeType == XMLReader::END_ELEMENT)) {

		if ($result = cml_store_content_store_xml_node($reader)) {
			$contentMap[] = $result;
		}

	}

	if (!$contentMap)
	{
		return FALSE;
	}

	cache_set('cml_store_content_offers', $contentMap, 'cache', CACHE_PERMANENT);

	return TRUE;
}

function cml_store_content_store_xml_node($reader)
{
	if ($reader->name == "Товар" && $reader->nodeType == XMLReader::ELEMENT) {
		$output = $reader->readOuterXml();
		if (!$output)
		{
			return FALSE;
		}
		$element = simplexml_load_string(trim($output));
		$currentId = md5('import' . (string)$element->Ид);
		cache_set($currentId, $output, 'cache', CACHE_PERMANENT);
		unset($element);
		return $currentId;
	}

	if ($reader->name == "Предложение" && $reader->nodeType == XMLReader::ELEMENT) {
		$output = $reader->readOuterXml();
		if (!$output)
		{
			return FALSE;
		}
		$element = simplexml_load_string(trim($output));
		$currentId = md5('offers' . (string)$element->Ид);
		cache_set($currentId, $output, 'cache', CACHE_PERMANENT);
		unset($element);
		return $currentId;
	}
}

function cml_store_content_batch($argument, $call_back = '', $options, &$context)
{
	$content = cache_get($argument);
	if ($content) {
		$element = simplexml_load_string(trim($content->data));
		if ($element && is_object($element)) {
			// Вычищаем из кеша контент
			//cache_clear_all($argument, 'cache');
			$arguments = array(
				'element' => $element,
				'options' => $options,
				'context' => &$context
			);
			return call_user_func_array('cml_store_content_' . $call_back, $arguments);
		}
	}

	$context['message'] .= t('<b style="color:red">The cache @argument is empty in the "cml_store_content_@call_back"</b><br>',
				array(
					'@argument' => $argument,
					'@call_back' => $call_back,
				)
			);

	return false;
}

//
// Content
//

function cml_store_content_get_imports_content()
{
	$content = cache_get('cml_store_content_products');
	if ($content) {
		//cache_clear_all('cml_store_content_products', 'cache');
		return $content->data;
	}
}

function cml_store_content_get_offers_content()
{
	$content = cache_get('cml_store_content_offers');
	if ($content) {
		//cache_clear_all('cml_store_content_offers', 'cache');
		return $content->data;
	}
}

//
// Count
//

function cml_store_content_get_products()
{
	return db_query("SELECT COUNT(pid) FROM {importkit_cml_content}")->fetchField();
}

function cml_store_content_get_offers()
{
	return db_query("SELECT COUNT(pid) FROM {importkit_cml_offers}")->fetchField();
}

//
// imported
//

function cml_store_content_get_products_imported($fields = array('pid'))
{
	$select = '';
	if($fields)
	{
		if(is_array($fields))
		{
			$select = ', ' . implode(', ', $fields);
		} else {
			$select = ', ' . $fields;
		}
	}
	$db_result = db_query("SELECT guid1, guid2 $select FROM {importkit_cml_content}");
	$options = array();
	foreach($db_result as $row) {
		$guid = $row->guid1 . ($row->guid2? '#'.$row->guid2: '');
		// Формирование заданий
		if($fields)
		{
			if(is_array($fields)){
				$options[ $guid ] = $row;
			} else {
				$options[ $guid ] = $row->$fields;
			}
		} else {
			$options[ $guid ] = $guid;
		}
	}
	return $options;
}

function cml_store_content_get_offers_imported($fields = array('pid'))
{
	$select = '';
	if($fields)
	{
		if(is_array($fields))
		{
			$select = ', ' . implode(', ', $fields);
		} else {
			$select = ', ' . $fields;
		}
	}
	$db_result = db_query("SELECT guid1, guid2 $select FROM {importkit_cml_offers}");
	$options = array();
	foreach($db_result as $row) {
		$guid = $row->guid1 . ($row->guid2? '#'.$row->guid2: '');
		// Формирование заданий
		if($fields)
		{
			if(is_array($fields)){
				$options[ $guid ] = $row;
			} else {
				$options[ $guid ] = $row->{$fields};
			}
		} else {
			$options[ $guid ] = $guid;
		}
	}
	return $options;
}

//
// Remove
//

function cml_store_content_node_remove($nid)
{
	return node_delete($nid);
}

function cml_store_content_offer_remove($pid)
{
	return commerce_product_delete($pid);
}

// create_node
function cml_store_content_create_node($element, $options, &$context)
{
	global $base_path, $user;

	if(!$options['max']){
		return;
	}

	if (!isset($element->Ид)) {
		watchdog('cml_store_content', 'Неверный формат импортируемого файла', array(), WATCHDOG_WARNING);
		return FALSE;
	}

	@list($guid1, $guid2) = explode('#', (string)$element->Ид);
	if (!$guid2) $guid2 = '';

	// Проверяем наличие
	$nid = db_query("SELECT pid FROM {importkit_cml_content} WHERE `guid1` = :guid1 LIMIT 1",
		array(
			':guid1' => $guid1
			))->fetchField();

	// Получаем базовые параметры
	$title = cml_store_content_get_product_title($element);
	$description = cml_store_content_get_product_description($element);
	$path = variable_get('importkit_data_path', '');

	// Создаем/Получаем ноду
	$node = cml_store_get_node($nid);

	// Проверяем на необходимость создания ноды
	if ($node) {

		// Служебные поля
		$node->guid1 = $guid1;
		$node->guid2 = $guid2;
		$node->operation = 'create-product';

		$sku = importkit_tutf($element->Артикул);
		$node->unique_hash = md5($guid1 . '#' . $guid2);

		// Получаем язык локализации
		$language = module_exists('locale') ? locale_multilingual_node_type($node->type) : LANGUAGE_NONE;
		if(!$language) $language = LANGUAGE_NONE;
		$node->language  = $language;

		// Загрузка наименования
		if ($node->title <> $title) $node->title = $title;

		$node->body[$node->language][0] = array(
			'value' => $description,
			'safe_value' => $description,
			'format' => variable_get('importkit_common_product_format', 'plain'),
		);

		// В зависимости от настроек выполняем заполнение данными
		$module = variable_get('importkit_content_module_use', 'commerce');
		$arguments = array(
				'node' => &$node,
				'sku' => $sku,
				'element' => &$element,
				'description' => &$description,
				'context' => &$context,
				'path' => $path,
				'guid1' => $guid1, // Нода
				'guid2' => $guid2, // Свойства
			);

		call_user_func_array('cml_store_content_create_node_' . $module, array($arguments));

		module_invoke_all('importkit_node', 'create', $node, $element);

		node_save($node);

		if (!$nid) {
			$product_log = t('Insert product: @type @current/@max with nid: @nid "@title" from XML.<br>',
				array(
					'@nid' => $node->nid,
					'@type' => $node->type,
					'@title' => $title,
					'@max' => $options['max'],
					'@current' => $context['results']['progress']
				)
			);
		} else {
			$product_log = t('Update product: @type such nid: @nid "@title" from XML.<br>',
				array(
					'@nid' => $node->nid,
					'@type' => $node->type,
					'@title' => $title,
					//'@max' => $options['max'],
					//'@current' => $context['sandbox']['progress']
				)
			);
		}

		$context['message'] .= $product_log;

		//$context['results']['errors']['nodes'][] = $node->nid;

	} else {
		$context['message'] .= t('Skip update/insert product GUID ( @guid1:@guid2 ).<br>',
			array(
				'@guid1' => $guid1,
				'@guid2' => $guid2,
				//'@max' => $options['max'],
				//'@current' => $context['sandbox']['progress']
			)
		);
	}

	return (bool)isset($node);

}

// create_feature
function cml_store_content_create_offers($element, $options, &$context)
{

	if(!$options['max']){
		return;
	}

	if (!isset($element->Ид)) {
		watchdog('cml_store_content', 'Неверный формат импортируемого файла', array(), WATCHDOG_WARNING);
		return FALSE;
	}

	@list($guid1, $guid2) = explode('#', (string)$element->Ид);
	if (!$guid2) $guid2 = '';

	// Проверяем наличие
	$nid = db_query("SELECT pid FROM {importkit_cml_content} WHERE `guid1` = :guid1 LIMIT 1",
		array(
			':guid1' => $guid1
			))->fetchField();

	 if($nid)
	 {

		 $node = node_load($nid);
		 $sku = importkit_tutf($element->Артикул);
		 $path = variable_get('importkit_data_path', '');

		 if($node)
		 {

			if(isset($element->Наименование))
			{
				$product_title = (string)$element->Наименование;
			} else {
				$product_title = $node->title;
			}

			// Служебные поля
			$node->guid1 = $guid1;
			$node->guid2 = $guid2;
			$node->operation = 'update-product';

			// В зависимости от настроек выполняем заполнение данными
			$module = variable_get('importkit_content_module_use', 'commerce');
			$arguments = array(
					'node' => &$node,
					'element' => &$element,
					'context' => &$context,
					'guid1' => $guid1, // Нода
					'guid2' => $guid2, // Свойства или продукт для Commerce
					'product_title' => $product_title,
					'price_guid' => variable_get('importkit_product_price_guid', ''),
					'sku' => $sku,
					'path' => $path,
				);
			call_user_func_array('cml_store_content_update_node_' . $module, array($arguments));

			module_invoke_all('importkit_node', 'update', $node, $element);

            node_save($node);

			$context['message'] .= t('Update @type nid: @nid "@title" from XML.<br>',
				array(
					'@nid' => $node->nid,
					'@type' => $node->type,
					'@title' => $product_title,
				)
			);

		 }

	 }

	 return (bool)isset($node);
}

function cml_store_content_get_product_title($element)
{
	$title = importkit_tutf($element->Наименование);
	if (isset($element->ЗначенияРеквизитов->ЗначениеРеквизита))
		foreach ($element->ЗначенияРеквизитов->ЗначениеРеквизита as $item) {
			if ($item->Значение) {
				switch ($item->Наименование) {
					case 'Полное наименование':
						$title = importkit_tutf($item->Значение);
						break;
				}
			}
		}

	// Обрезаем до заданной длины
	if(function_exists('mb_substr')){
		$title = mb_substr($title, 0, variable_get('importkit_display_title_field_length', 120), 'UTF-8');
	}

	return $title;
}

function cml_store_content_get_product_description($element)
{
	if (isset($element->ЗначенияРеквизитов->ЗначениеРеквизита))
	{
		foreach ($element->ЗначенияРеквизитов->ЗначениеРеквизита as $item)
		{
			if ((string) $item->Значение == variable_get('importkit_display_description_field', 'Описание'))
			{
				if($item->Значение == 0)
				{
					return '';
				}
				return importkit_tutf($item->Значение);
			}
		}
	}
	if(isset($element->Описание))
	{
		return importkit_tutf($element->Описание);
	}
		return '';
}

function cml_store_content_is_product($node)
{
	return (bool)$node->type == variable_get('importkit_content_node_type', 'product');
}

function cml_store_content_is_field($node)
{
	return (bool)$node->type == variable_get('importkit_common_product_field_name', '');
}

// Node API

function cml_store_content_node_insert($node)
{
	if (cml_store_content_is_product($node) &&
	 isset($node->guid1) &&
	 $node->operation == 'create-product')
	{
		/*if (!@db_query("INSERT INTO {importkit_cml_content} (`guid1`, `guid2`, `pid`, `unique_hash`)
		VALUES (:guid1, :guid2, :pid, :unique_hash)",
		array(
		':guid1' => $node->guid1,
		':guid2' => $node->guid2,
		':pid' => $node->nid,
		':unique_hash' => (string)$node->unique_hash)
		));*/

		/*db_merge('importkit_cml_content')
			->key(array(
			'guid1' => $node->guid1,
			'guid2' => $node->guid2,
			))
			->fields(array(
			'guid1' => $node->guid1,
			'guid2' => $node->guid2,
			'pid' => $node->nid,
			'unique_hash' => (string)$node->unique_hash,
			))
			->execute();*/
	}
}

function cml_store_content_node_update($node)
{
	if ($node->type == variable_get('importkit_content_node_type', 'product') &&
	isset($node->guid1))
	{
/*
        if (!isset($node->unique_hash)) {
            $guid1 = $node->$guid1;
            $guid2 = isset($node->$guid2)?$node->$guid2:'';

            $node->unique_hash = md5($guid1 . '#' . $guid2);
        }
*/
		db_merge('importkit_cml_content')
			->key(array(
			'guid1' => $node->guid1,
			'guid2' => $node->guid2,
			))
			->fields(array(
				'guid1' => $node->guid1,
				'guid2' => $node->guid2,
				'pid' => $node->nid,
				'unique_hash' => isset($node->unique_hash)? (string)$node->unique_hash: '',
			))
			->execute();

		if(variable_get('importkit_content_module_use', 'ubercart') == 'ubercart'){
			$fields = array(
				'guid1' => $node->guid1,
				'guid2' => $node->guid2,
				'pid' => $node->vid,
				'nid' => $node->nid,
				//'model' => $node->_model
				);
			if(isset($node->_model)){
				$fields['model'] = $node->_model;
			}
			if(isset($node->_combination)){
				$fields['uc_combination'] = serialize($node->_combination);
			}
			db_merge('importkit_cml_offers')
				->key(array(
				'guid1' => $node->guid1,
				'guid2' => $node->guid2,
				))
				->fields($fields)
				->execute();
		}
	}
}

function cml_store_content_node_delete($node)
{
	if (!cml_store_content_is_product($node)) return;
	if (!cml_store_content_is_product_imported($node)) return;

	db_query("DELETE FROM {importkit_cml_content} WHERE pid = :pid", array(':pid' => $node->nid));
	db_query("DELETE FROM {importkit_cml_offers} WHERE nid = :nid", array(':nid' => $node->nid));

	/*switch(variable_get('importkit_content_module_use', 'ubercart'))
	{
		case 'commerce':
			//$pid =
			//cml_store_content_offer_remove($pid);
		break;

		case 'ubercart':
			// Нельзя удалить
		break;
	}*/

}

// Entity API

function cml_store_content_entity_insert($entity, $entityType)
{
	if ($entityType == 'commerce_product' &&
	isset($entity->guid1) &&
	isset($entity->guid2) &&
	isset($entity->node))
	{
		db_merge('importkit_cml_offers')
			->key(array(
			'guid1' => $entity->guid1,
			'guid2' => $entity->guid2,
			))
			->fields(array(
			'guid1' => $entity->guid1,
			'guid2' => $entity->guid2,
			'pid' => $entity->product_id,
			'nid' => $entity->node->nid,
			'model' => $entity->sku
			))
			->execute();
	}
}

function cml_store_content_entity_delete($entity, $entityType)
{
	if ($entityType == 'commerce_product')
	{
	 db_query("DELETE FROM {importkit_cml_offers} WHERE pid = :pid", array(':pid' => $entity->product_id));
	}
}

// OTHER

function cml_store_content_is_product_imported($node)
{
	return (bool)db_query("SELECT pid FROM {importkit_cml_content} WHERE pid = :nid LIMIT 1",
		array(':nid' => $node->nid
		))->fetchField();
}

function cml_store_get_node($nid)
{
	global $user;

	if ($nid) {
		$node = node_load($nid);
	} else {
		// ************* PATCH: commerce зависит от entity, так что entity всегда будет
		$values = array(
		  'type' => variable_get('importkit_content_node_type', 'product'),
		  'uid' => $user->uid ? $user->uid : 1,
		  'status' => 1,
		  'revision' => false
		);

		$node = entity_create('node', $values);
		// $node = new stdClass();
		// ********* END OF PATCH
		$node->created = time();
		$node->type = variable_get('importkit_content_node_type', 'product');
		$node->uid = $user->uid ? $user->uid : 1;
		$node->name = $user->name ? $user->name : 'admin';
		$node->revision = false; //log
		$node->title = '';
		$node->body = '';

		$node->vid = 0;
		$node->nid = 0;
		$node->model = '';
		$node->sku = '';
		$node->list_price = 0;
		$node->cost = 0;
		$node->sell_price = 0;
		$node->weight = 0;
		$node->weight_units = 0;
		$node->length = 0;
		$node->width = 0;
		$node->height = 0;
		$node->length_units = 0;
		$node->pkg_qty = 0;
		$node->default_qty = 0;
		$node->unique_hash = '';
		$node->ordering = 0;
		$node->shippable = 0;
		$node->street1 = '';

		// Установка реквизитов полей по умолчанию
		$node->weight = 0;
		$node->weight_units = variable_get('uc_weight_unit', 'lb');
		$node->length = 0;
		$node->length_units = variable_get('uc_length_unit', 'in');

		// TODO:// Сделать для этих полей настройки
		$node->promote = 0; // Помещать на главную
		$node->pkg_qty = 1; // количество товаров в упаковке
		$node->default_qty = 1; // ?
		$node->shippable = 1; // Продукт отгружаемый

		$node->format = array();

		node_save($node);
	}

	return $node;
}

function cml_store_content_create_imagefield($field_name = 'uc_product_image', $path_source = '', $update_picture = FALSE)
{
	$scheme = variable_get('file_default_scheme', 'public') . '://';

	//Определяем указанный в настройках путь хранения изображений для заданного поля
	$data = db_query("SELECT data FROM {field_config_instance} WHERE field_name = :field_name LIMIT 1",
	array(':field_name' => $field_name))->fetchField();
	$data = unserialize ( $data );
	$file_directory = $data[ 'settings' ][ 'file_directory' ];
	$data = array();
	$file_directory = token_replace($file_directory, $data);
	$destination = file_stream_wrapper_uri_normalize ( $scheme . $file_directory );
	if(file_prepare_directory($destination, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS)){
		$destination .= '/' . basename ( $path_source );
		if(variable_get('cml_content_image_settings', 1)){
		$destination = file_unmanaged_copy($path_source, $destination, FILE_EXISTS_RENAME);
		} else {
		$destination = file_unmanaged_move($path_source, $destination, FILE_EXISTS_REPLACE);
		}

		if($destination){
			$file = cml_store_content_uri_to_object($destination, $update_picture);
			if(file_save($file)){
				return $file;
			}
		}
	} else {
		return false;
	}
}

function cml_store_content_uri_to_object($uri, $use_existing = FALSE)
{

	if ($use_existing) {
		$query = db_select('file_managed', 'f')
			->fields('f', array('fid'))
			->condition('uri', $uri)
			->execute()
			->fetchCol();
		if (!empty($query)) {
			$file = file_load(array_shift($query));
		}
	}
	if (!isset($file)) {
		global $user;
		$uri = file_stream_wrapper_uri_normalize($uri);
		//$wrapper = file_stream_wrapper_get_instance_by_uri($uri);
		$file = new StdClass;
		$file->uid = $user->uid;
		$file->filename = basename($uri);
		$file->uri = $uri;
		$file->filemime = file_get_mimetype($uri);
		// This is gagged because some uris will not support it.
		$file->filesize = @filesize($uri);
		$file->timestamp = REQUEST_TIME;
		$file->status = FILE_STATUS_PERMANENT;
		$file->is_new = TRUE;
	}
	return $file;
}

function cml_store_vocabulary_bind($params, $field_name = 'taxonomy_catalog')
{
	extract($params);

	if ($result = cache_get('cml_store_category_category')) {
		$categoryMap = $result->data;
	} else {
		if(function_exists('cml_store_category_get_imported')){
			$categoryMap = cml_store_category_get_imported();
		}
	}

	// Загрузка категорий и зависимостей от них
	if (isset($categoryMap)) {
		// Привязка к категориям
		if (isset($element->Группы)) {
			foreach ($element->Группы as $item) {
				if (isset($categoryMap[ (string)$item->Ид ] )) {
					// Получаем список Ид групп для продукта
					$tid = $categoryMap[ (string)$item->Ид ];
					// Очищаем термин
					importkit_field_reset($node->{$field_name}[$node->language], 'tid', $tid);
					// Привязываем термин
					$node->{$field_name}[$node->language][] = array('tid' => $tid);
				}
			}
		}
	}

}

function cml_store_images_bind(&$node, $element, $field_name = '')
{
	global $user;

		// Загрузка картинки
		if (isset($element->Картинка)) {
			$picture = 0;
			foreach ($element->Картинка as $image) {

				if ((string)$image) {
					$filepath = variable_get('importkit_data_path', '') . '/' . (string)$image;
					if (file_exists($filepath)) {
						if(!$file = cml_store_content_create_imagefield($field_name, $filepath, TRUE)){
							$context['results']['errors'][] = t('Can`t create imagefield from source path @pic', array('@pic' => $filepath));
						}else{
							image_path_flush($file->uri);
							if(!isset($node->{$field_name}[$node->language]))
							{
								$node->{$field_name}[$node->language] = array();
							}
							$node->{$field_name}[$node->language][ $picture ] = array(
								'fid' => $file->fid,
								'uid' => $user->uid,
								'display' => 1,
								'description' => '',
							);
							$picture++;
						}

					} else {
						$context['results']['errors'][] = t('Can`t find image @pic', array('@pic' => $filepath));
					}
				}
			}
		}
}

function cml_store_content_get_guid($product)
{
		switch(variable_get('importkit_content_module_use', 'ubercart'))
		{
			case 'commerce':
				$sql="SELECT `guid1`, `guid2` FROM {importkit_cml_offers} WHERE `pid` = :pid LIMIT 1";
				$guid = db_query($sql, array(':pid' => $product->product_id))->fetchObject();
			break;
			case 'ubercart':
				// TODO 9: Реализовать поиск GUID для модуля Ubercart
				if(isset($product->nid)){
					// Содержит атрибуты
					if(isset($product->data['combination'])){
						$combination = $product->data['combination'];
						ksort($combination);
						$guid = db_select('importkit_cml_offers', 'o')
							->fields('o', array('guid1', 'guid2'))
							->condition('o.uc_combination', serialize($combination))
							->execute()
							->fetchObject();
					} else {
						$guid = db_select('importkit_cml_offers', 'o')
							->fields('o', array('guid1', 'guid2'))
							->condition('o.nid', $product->nid)
							->execute()
							->fetchObject();
					}
				}
			break;
		}

		if(isset($guid)){
			return $guid->guid2? $guid->guid1 . '#' . $guid->guid2: $guid->guid1;
		} else {
			return '';
		}
}

//
// Ubercart 3
//

// Импортируем из import.xml
function cml_store_content_create_node_ubercart($params)
{
		extract($params);

		if(!$sku)
		{
			$sku = mt_rand(1, 9999999);
		}

		$node->model = $sku;

		// Настройка ноды
		$node->changed = time();
		$node->status = TRUE; // Вкл/Откл ноду
		$node->format = variable_get('importkit_common_product_format', 'plain' ); // Форматируется

		// Настройка ноды
		$node->shippable = variable_get('uc_product_shippable_' . $node->type, 1); // Отгружаем

		// загрузка реквизитов
		if (isset($element->ЗначенияРеквизитов->ЗначениеРеквизита)) {
			foreach ($element->ЗначенияРеквизитов->ЗначениеРеквизита as $fields_data) {
				if ($fields_data->Значение) {
					switch ($fields_data->Наименование) {
						case 'Вес';
							$node->weight = (float)$fields_data->Значение;
							$node->weight_units = variable_get('uc_weight_unit', 'lb');
							break;
						case 'Длина';
							$node->length = (float)$fields_data->Значение;
							$node->length_units = variable_get('uc_length_unit', 'in');
							break;
						case 'Ширина';
							$node->width = (float)$fields_data->Значение;
							break;
						case 'Высота';
							$node->height = (float)$fields_data->Значение;
							break;
						case 'Технические характеристики';
							$node->field_body2[$node->language][0] = (string)$fields_data->Значение;
							break;
					}
				}
			}
		}

		// Привязываем словарь
		cml_store_vocabulary_bind($params, variable_get('importkit_content_category_field', 'field_category'));
}

// Импортируем из offers.xml
function cml_store_content_update_node_ubercart($params)
{
		extract($params);

		// TODO 9: реализовать привязку и добавление атрибутов

		$attributes = array();
		$rows = db_select('uc_attributes','a')
									->fields('a')
									->execute();
		foreach($rows as $row){
			$attributes[$row->aid] = $row;
		}

		$model = array();

		$model[] = isset($node->model)? $node->model: $node->nid;

		foreach ($element->ХарактеристикиТовара->ХарактеристикаТовара as $feature) {
			if($feature->Значение){
				$option_name = (string)$feature->Наименование;
				foreach($attributes as $name => $attribute){
					$attribute_name = preg_replace('~\s+~','', $attribute->name);
					if( $option_name == variable_get('importkit_content_feature_' . $attribute->aid, '') ){

						// Создаем атрибут для продукта
						cml_store_content_update_product_uc_attribute($attribute->aid, $node->nid);

						// Заносим свойство для атрибута
						$oid = cml_store_content_update_product_uc_attribute_options($node->nid, $attribute->aid, (string)$feature->Значение);

						// Формируем список Харрактеристик
						$model[] = $option_name . ': ' . (string)$feature->Значение;
						$combination[ $attribute->aid ] = $oid;
						cml_store_content_update_product_uc_option($oid, $node->nid, 0, 0);
						cml_store_content_update_product_uc_attribute($attribute->aid, $node->nid, $oid);

					}
				}
			}
		}

		$node->_model = implode(' ', $model);

		if(isset($combination)){

			ksort($combination);

			$node->_combination = $combination;

			db_merge('uc_product_adjustments')
				->key(array(
					'nid' => $node->nid,
					'combination' => serialize($combination),
				))
				->fields(array(
					'model' => $node->_model,
				))
				->execute();

		}

}

function cml_store_content_update_product_uc_option($oid, $nid, $cost = 0, $price = 0){
	return  db_merge('uc_product_options')
						->key(
								array(
										'nid' => $nid,
										'oid' => $oid,
								)
						)
						->fields(
								array(
										'nid' => $nid,
										'oid' => $oid,
										'cost' => $cost,
										'price' => $price,
										'weight' => 0,
										'ordering' => 0,
								)
						)
						->execute();
}

function cml_store_content_update_product_uc_attribute_options($nid, $aid, $name){

	$oid = db_select('uc_attribute_options', 'o')
						->fields('o', array('oid'))
						->condition('aid', $aid)
						->condition('name', $name, 'LIKE')
						->execute()
						->fetchField();

	if(!$oid){
		$attribute_options = array(
			'aid' => $aid,
			'name' => $name,
			'cost' => 0,
			'price' => 0,
			'weight' => 0,
			'ordering' => 0,
		);
		drupal_write_record('uc_attribute_options', $attribute_options);
		$oid = $attribute_options['oid'];
	}

	if(!db_select('uc_product_attributes','o')
				->fields('o', array('default_option'))
				->condition('nid', $nid)
				->condition('aid', $aid)
				->execute()
				->fetchField())
	{
		// Проставляем дефолтные значения
		$field_attribute = array(
			'nid' => $nid,
			'aid' => $aid,
			'default_option' => $oid,
		);
		drupal_write_record('uc_product_attributes', $field_attribute, array('nid', 'aid'));
	}

	return $oid;
}

function cml_store_content_update_product_uc_attribute($aid, $nid, $default = 0){

	$result = db_select('uc_product_attributes', 'a')
								->fields('a')
								->condition('aid', $aid)
								->condition('nid', $nid)
								->execute()
								->rowCount();

	if(!$result){
		$attribute = uc_attribute_load($aid);
		if($attribute){
			$field_attribute = array(
			 'aid' => $attribute->aid,
			 'nid' => $nid,
			 'label' => $attribute->label,
			 'ordering' => $attribute->ordering,
			 'default_option' => $default,
			 'required' => $attribute->required,
			 'display' => $attribute->display,
			);
			return drupal_write_record('uc_product_attributes', $field_attribute);
		}
	}

	return $result;
}

//
// Commerce
//

// Импортируем из import.xml
function cml_store_content_create_node_commerce($params)
{
	global $user;

	extract($params);

	// Привязываем словарь
	cml_store_vocabulary_bind($params, variable_get('importkit_content_category_field', 'field_category'));

	$product = cml_store_content_create_product_commerce($params);

	// ЗначенияСвойств
	if(isset($element->ЗначенияСвойств->ЗначенияСвойства)){

		$vocabularies = array();
		$fields = field_read_fields();

		foreach ($element->ЗначенияСвойств->ЗначенияСвойства as $item) {
			foreach($fields as $name => $field){
				if ((string) $item->Ид == variable_get('importkit_content_property_' . $field['id'])) {
					if(variable_get('importkit_content_module_use', 'ubercart') == 'commerce'){
						$name = importkit_tutf($item->Значение);
						// Выполняем поиск атрибута (Commerce)
						$vocabulary_machine_name = $field['settings']['allowed_values'][0]['vocabulary'];
						$terms = taxonomy_get_term_by_name($name, $vocabulary_machine_name);
						if($terms && count($terms)){
							$term = reset($terms);
						} else {
							if(!isset($vocabularies[$vocabulary_machine_name])){
								$vocabularies[$vocabulary_machine_name] = taxonomy_vocabulary_machine_name_load($vocabulary_machine_name);
							}
							$vocabulary = $vocabularies[$vocabulary_machine_name];
							$term = (object) array(
								'name' => $name,
								'vid' => $vocabulary->vid,
							);
							taxonomy_term_save($term);
						}

						$field_name = $field['field_name'];

						// Очищаем поле
						importkit_field_reset($product->{$field_name}['und'], 'tid', $term->tid);

						$product->{$field_name}['und'][] = array( 'tid' => $term->tid);
					}
				}
			}
		}

		// Сохраняем продукт
		commerce_product_save($product);

	}



	// Привязываем картинку к дисплею
	$node_image_field = variable_get('importkit_display_image_field', '');
	if (!empty($node_image_field))
	{
		cml_store_images_bind($node, $element, $node_image_field);
	}

}

// Импортируем из offers.xml
function cml_store_content_update_node_commerce($params)
{
		extract($params);

		// Создаем/Обновляем продукт
		$product = cml_store_content_create_product_commerce($params);

		// ХарактеристикиТовара
		if(isset($element->ХарактеристикиТовара->ХарактеристикаТовара)){

			$vocabularies = array();
			$fields = field_read_fields();
			foreach ($element->ХарактеристикиТовара->ХарактеристикаТовара as $item) {
				foreach($fields as $name => $field){
					if ((string) $item->Наименование == variable_get('importkit_content_feature_' . $field['id'])) {
						$name = importkit_tutf($item->Значение);
						// Выполняем поиск атрибута (Commerce)
						$vocabulary_machine_name = $field['settings']['allowed_values'][0]['vocabulary'];
						$terms = taxonomy_get_term_by_name($name, $vocabulary_machine_name);
						if($terms && count($terms)){
							$term = reset($terms);
						} else {
							if(!isset($vocabularies[$vocabulary_machine_name])){
								$vocabularies[$vocabulary_machine_name] = taxonomy_vocabulary_machine_name_load($vocabulary_machine_name);
							}
							$vocabulary = $vocabularies[$vocabulary_machine_name];
							$term = (object) array(
								'name' => $name,
								'vid' => $vocabulary->vid,
							);
							taxonomy_term_save($term);
						}

						$field_name = $field['field_name'];

						// Очищаем поле
						importkit_field_reset($product->{$field_name}['und'], 'tid', $term->tid);

						$product->{$field_name}['und'][] = array('tid' => $term->tid);
					}
				}
			}

		}

		$product->changed = time();

		module_invoke_all('importkit_product', 'update', $product, $element);

		// Обновляем продукт
		commerce_product_save($product);

		// Привязываем к ноде обновленный/созданный продукт
		$reference_field = variable_get('importkit_common_product_field_name', 'field_product');

		// Очищаем привязку
		importkit_field_reset($node->{$reference_field}[$product->language], 'product_id', $product->product_id);

		// Привязываем к ноде к продукт
		$node->{$reference_field}[$product->language][] = array('product_id' => $product->product_id);
}

function cml_store_content_create_product_commerce($params)
{
		global $user;

		extract($params);

		$product = null;

		// Проверяем наличие
		if($pid = db_select('importkit_cml_offers', 'c')
			->fields('c', array('pid'))
			->condition('c.guid1', $guid1)
			->condition('c.guid2', $guid2)
			->execute()
			->fetchField())
			$product = commerce_product_load($pid);

		if(!$product){
			// Инициализация
			$product = commerce_product_new(variable_get('importkit_common_product_type', 'product'));
			$product->uid = $user->uid;
			$product->created = time();
			$product->name = $user->name ? $user->name : 'admin';
			$product->revision = false; //log
			$product->field_unit_goods[LANGUAGE_NONE][0] = array('value' => 'шт.');
			$product->language  = $node->language;
			$product->commerce_price = array(
			'und' => array(
				0 => array(
					'amount' => 0,
					'currency_code' => commerce_default_currency()
				)
			)
			);
			$product->commerce_stock = array('und' => array(0 => array('value' => 0)));
		}

		if(isset($element->Наименование))
		{
			$product->title = (string)$element->Наименование;
		} else {
			$product->title = $node->title;
		}

		if(isset($node->body))
		{
			$product->body = $node->body;
		}

		// Проверяем на уникальность только при создании продукта

		// Проверяем уникальность и генерируем артикул, если
		//  1) в товаре его нет
		//  2) существует новое значение артикула и оно отличается от значения в товаре
		if(!$product->sku || (($product->sku <> $sku) && $sku)) {
			// генерируем артикул до тех пор, пока не получим уникальный
			while(!$sku || !commerce_product_validate_sku_unique($sku, 0)) {
				$sku = mt_rand(1, 9999999); // Генерирует SKU
			}
			$product->sku = $sku;
		}

		$product->guid1 = $guid1;
		$product->guid2 = $guid2;
		$product->node = $node;
		$product->changed = time();
		
		/* Решаем проблему с дублем вот так
		// Привязываем картинку к продукту
		$node_image_field = variable_get('importkit_product_image_field', '');
		if (!empty($node_image_field))
		{
			cml_store_images_bind($product, $element, $node_image_field);
		}
		*/
		
		module_invoke_all('importkit_product', 'create', $product, $element);

		commerce_product_save($product);

		return $product;

}
